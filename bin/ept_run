#!/usr/bin/env python
from multiprocessing import Pool
from multiprocessing.managers import BaseManager
import asyncio
import importlib
from ept.util import csv_util, date_util
from aiohttp import ClientSession
from aiohttp.connector import TCPConnector


class LogManager(object):
    def __init__(self):
        self.log_dict = []

    def update(self, new_dict):
        self.log_dict.append(new_dict)

    def log(self):
        return self.log_dict


class CustomManager(BaseManager):
    pass


CustomManager.register('Log', LogManager)


async def _task(sems, tasks, module_name, func, log_manager, args,
                verify_ssl=False):
    module = importlib.import_module('ept.core.' + module_name)
    sem = asyncio.Semaphore(sems)
    async with ClientSession(connector=TCPConnector(verify_ssl=verify_ssl))\
            as session:
        resps = asyncio.gather(
            *[asyncio.ensure_future(getattr(module, func)(sem, session,
                                                          log_manager, args))
              for _ in range(tasks)])
        await resps


def _run(sems, tasks, module_name, func, log_manager, args):
    loop = asyncio.get_event_loop()
    future = asyncio.ensure_future(
        _task(sems, tasks, module_name, func, log_manager, args))
    loop.run_until_complete(future)


def run(sems, tasks, module_name, func, processes, for_loop, log_manager,
        *args):
    with Pool(processes=int(processes)) as pool:
        results = [pool.apply_async(_run, (sems, tasks, module_name, func,
                                           log_manager, args))
                   for _ in range(int(for_loop))]
        for r in results:
            r.wait()


def main():
    csv_util.remove('log.csv')
    csv_util.create('log.csv')
    manager = CustomManager()
    manager.start()
    log_manager = manager.Log()
    start_time = date_util.timestamp_now()
    run(200, 1000, 'http', 'get', 4, 4, log_manager,
        'http://127.0.0.1:60001/get', 'test')
    print(date_util.timestamp_now() - start_time)
    print(len(log_manager.log()))


if __name__ == '__main__':
    main()
